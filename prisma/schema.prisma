generator client {
  provider = "prisma-client-js"
  previewFeatures = ["clientExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model customer_preference {
  id                  String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  reservation_id      String?      @db.Uuid
  dietary_restriction String?      @db.VarChar(255)
  special_request     String?      @db.VarChar(255)
  reservation         reservation? @relation(fields: [reservation_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model reservation {
  id                  String                @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  customer_id         String?               @db.Uuid
  restaurant_id       String?               @db.Uuid
  table_layout_id     String?               @db.Uuid
  reservation_date    DateTime              @db.Timestamp(6)
  number_of_guests    Int
  status              String                @db.VarChar(50)
  customer_preference customer_preference[]
  user                user?                 @relation(fields: [customer_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  restaurant          restaurant?           @relation(fields: [restaurant_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  table_layout        table_layout?         @relation(fields: [table_layout_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model restaurant {
  id                  String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id             String?        @db.Uuid
  name                String         @db.VarChar(255)
  location            String?        @db.VarChar(255)
  contact_information String?        @db.VarChar(255)
  reservation         reservation[]
  user                user?          @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  table_layout        table_layout[]
  waiter              waiter[]
}

model table_layout {
  id               String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  restaurant_id    String?       @db.Uuid
  table_number     Int
  seating_capacity Int
  reservation      reservation[]
  restaurant       restaurant?   @relation(fields: [restaurant_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model user {
  id          String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email       String        @unique @db.VarChar(255)
  firstName   String?       @db.VarChar(255)
  lastName    String?       @db.VarChar(255)
  roq_user_id String        @db.VarChar(255)
  tenant_id   String        @db.VarChar(255)
  reservation reservation[]
  restaurant  restaurant[]
  waiter      waiter[]
}

model waiter {
  id            String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id       String?     @db.Uuid
  restaurant_id String?     @db.Uuid
  restaurant    restaurant? @relation(fields: [restaurant_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user          user?       @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}
